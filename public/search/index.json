[{"content":"hosts 是什么？ 相信大家都看过流浪地球 2，其中有这么一个情节，重启世界根服务器，那么这个根服务器到底是什么呢？这里就不得不提及域名解析系统的发展史了 在很早很早以前，域名解析系统还没有建立起来，全球的网络主机还很少的时候，IP 地址的映射主要靠的就是各主机里的 hosts 文件来实现，那时候的 hosts 文件保存着互联网上所有主机地址的映射。而 hosts 文件的更新是由一个专门来维护 hosts 文件的站点来实现。也就是说那时根本就不需要也没有 DNS 服务器这东西，用自己主机上的 hosts 文件就可以找到对方的 IP 地址然后建立连接了\n但是后来随着互联网的规模不断扩大，hosts文件的维护也越来越困难，毕竟全球的网络主机都需要通过这个负责维护 hosts 更新站点来更新，hosts 所存放的解析记录数量级不断增加，单单只是检索就要花不少时间\n当我们打开这个hosts文件之后可以发现里面有一下内容\nWindows 目录是: C:\\Windows\\System32\\drivers\\etc\\hosts\nLinux 目录是: /etc/hosts\n1 2 3 4 5 6 7 8 9 10 11 12 13 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback ff02::1 ip6-allnodes ff02::2 ip6-allrouters 20.205.243.166　github.com 61.91.161.217\twww.google.com 61.91.161.217\tgoogle.com 61.91.161.217\tgcr.io 61.91.161.217\twww.gcr.io 61.91.161.217\tcom.google 61.91.161.217\tadmin.google.com 61.91.161.217\taccounts.google.com 61.91.161.217\taccounts.google.cn 看到第一行就是我们所熟悉的127.0.0.1　localhost，就是在hosts中定义的\n可以看第 5 行前面是 IP 后面是域名一一对应，是不是突然就明白了这个hosts文件的作用\nDNS 是什么 DNS（Domain Name System，域名系统），将人类可读的域名（例如 www.example.com）转换为机器用于相互通信的IP地址（例如 192.0.2.1 或 2001:db8::1）的一种分布式数据库。打个比方来说，DNS就像一个电话簿，IP相当于电话号码，域名相当于联系人\n小贴示\n这几条可以看出一个 IP 地址可以同时对应多个域名，这也就是为什么平时在地址栏上输入 google.com或www.google.com都可以访问 google 了。而https://是浏览器自动帮你加上去的，平时我们访问不了 google 的原因是，google 的域名 在本机转化为 IP 地址后经过中国大陆的防火长城，被防火长城检测到与黑名单内的关键词匹配（如：Google、Facebook、twitter等都在黑名单内），然后就会伪装成目标域名的解析服务器返回虚假的查询结果。关键的是通常的域名查询没有任何认证机制，而且域名的查询一般是基于无连接不可靠的 UDP 协议，所以浏览器只能接受最先到达的格式正确结果，并把之后的所有结果丢弃。所以这也就访问不了啦，这种情况就是所谓的 DNS 缓存污染，也称为 DNS 缓存投毒（这个真形象…）参考文献-从修改hosts文件科学上网中理解DNS（上）\n一个域名背后可以有多个I地址。当域名解析服务器在解析域名记录的“值”中包含多个IP地址时，LDNS会返回所有IP地址，但返回I地址的顺序是随机的。浏览器默认选取第一个返回的 IP地址作为解析结果，其解析流程如下。\n网站访问者通过浏览器向Local DNS（简称LDNS）发送解析请求。 LDNS将解析请求逐级转发（递归）至权威DNS。 权威DNS在收到解析请求后，将所有I地址以随机顺序返回LDNS。 LDNS将所有IP地址返回浏览器。 网站访问者的浏览器随机访问其中一个I地址，通常（不是绝对）选取第一个返回的IP地址。在没有做反向代理的情况下，如果返回的IP地址有多个，那么访问到这些IP地址的机会一般是均等的。 在DNS解析的描述过程中，浏览器首先通过本地的DNS服务（LDNS）发送第一个 解析请求，然后由LDNS返回IP地址，访问对应的服务器所提供的互联网服务。 这样就带来了一个问题：如果LDNS返回的不是公网的域名解析服务解析出的IP地址， 而是经过本地篡改的呢？\n域名篡改 域名会被篡改吗？或域名解析服务器在解析域名后返回的IP地址会被篡改吗？ 在回答上述问题前，我们先查看Linux系统中有关DNS的配置文件。\n引言\n/etc/hosts：记录hostname对应的IP地址 /etc/resolv.conf：设置DNS服务器的IP地址 /etc/host.conf：指定域名解析的顺序，是先从hosts 解析还是先从DNS解析\nLDNS 优先解析hosts 文件（Windows 路径是C：\\Windows\\System32\\driversletclhosts）,在hosts文件中，改变域名指向的I地址，我们将不会访问到原来的公网主机。示例如下：\n1 [root@linuxido ~]# ping linuxido.com({}) →在修改前，对城名执行ping命令\n1 2 3 PING linuxido.com (123.56.94.254) 56(84) bytes of data. 64 bytes from 123.56.94.254 (123.56.94.254): icmp _seq=1 ttl=53 time=25.6 ms [root@linuxido ~l# dig +short linuxido.com →使用dig命令解析域名\n1 2 3 4 5 123.56.94.254 ##→修改域名对应的IP地址 [root@linuxido~]# echo \u0026#39;120.120.120.120 linuxido.com\u0026#39; \u0026gt;\u0026gt; /etc/hosts [root@linuxido~]# ping linuxido.com →修改后，再对域名执行ping命今\n1 2 PING linuxido.com (120.120.120.120) 56(84) bytes of data. 并→可以看到ping命令失败，无法ping通120.120.120.120 →使用host命令解析城名，可以看到依然是公网IP地址\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 [root@linuxido~l# host linuxido.com linuxido.com has address 123.56.94.254[root@linuxido ~]# nslookup linuxido.com Server: Address: 8.8.8.8 8.8.8.8#53 Non-authoritative answer: Name: linuxido.com Address: 123.56.94.254 [root@linuxido ~]# dig linuxido.com linuxido.com. 599 IN A 123.56.94.254 ##一修改hosts 文件后，dig命令解析的城名依然是公网IP地址。找寻A的记录，它是不经过LDNS iSERVER:8.8.8.8#53（8.8.8.8) ##→本机的DNS地址设置为8.8.8.8，DNS的默认端口是53 如果没有修改 hosts 文件，在什么情况下可能出现DNS返回错误的IP 地址呢？域名劫持是最可能出现的情况。域名劫持就是通过攻击或伪造域名解析服务器的方式，把目标网站域名解析到错误的 I地址，从而使用户访问一些非法、恶意网站。因此，我们需要使用域名解工具查看访问域名是都真正对应IP地址\nDNS污染 小贴示\n网域服务器缓存污染（英语：DNS cache pollution）、DNS污染或DNS劫持，是一种破坏域名系统查询解析的行为。[1]通常有计算机程序自动执行DNS劫持攻击导致DNS服务器缓存了错误记录的现象。而域名服务器缓存投毒（DNS cache poisoning）和DNS缓存投毒指由计算机程序执行的DNS劫持攻击。污染一词可能取自域名系统域名解析之特性，若递归DNS解析器查询上游时收到错误回复，所有下游也会受影响 参考文献（3）-域名服务器缓存污染\nhosts是如何实现科学上网的 这里以GitHub为例\n1 20.205.243.166　github.com GitHub站点毕竟在国外，当dns请求时返回最快的那一个IP，但是想要访问就肯定要走大陆宽带，防火长城就会返回一个假的结果，那么hosts为什么能直接连上GitHub呢，这里就不得不提及域名解析的优先级了，hosts \u0026gt; DNS，在DNS域名解析系统建立起来之后hosts被弃用，但仍然保留在Linux，Windows系统内，而且优先级一般大于dns解析结果，从而能够建立连接\n当然，如果想流畅的访问GitHub单单只是修改hosts效果并不明显，可以搭配FastGithub合法的工具访问 附录 参考文献 参考文献（1）-从修改hosts文件科学上网中理解DNS（上）\n参考文献（2）-Linux从入门到精通 第八章 Linux网络与安全\n参考文献（3）-域名服务器缓存污染\n版权信息 本文原载于 nightrainmilkyway.cn，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2024-09-23T10:08:44+08:00","image":"https://img.nightrainmilkyway.cn/img/122622935_p0 (1).png","permalink":"http://localhost:1313/p/%E4%BF%AE%E6%94%B9hosts%E6%96%87%E4%BB%B6%E7%90%86%E8%A7%A3dns/","title":"修改hosts文件理解dns"},{"content":"前言 上篇文章讲了如何在termux上快速安装arch linux，然后就可以玩一些好玩的，Google发行的NDK并不支持ARM架构\n下载NDK 在Android开发者网站上下载NDK，下载地址为：https://developer.android.com/ndk/downloads 然后解压到root目录下\n1 unzip android-ndk-r27b-linux.zip 然后安装zip工具链并新建一个test目录\n1 2 pacman -S zip \u0026amp;\u0026amp; mkdir test \u0026amp;\u0026amp; cd test \u0026amp;\u0026amp; touch test.sh 并填入以下内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 #!/bin/sh set -eu TEST_DIR=\u0026#34;$(dirname \u0026#34;$(realpath \u0026#34;$0\u0026#34;)\u0026#34;)\u0026#34; ## ndk clang resource dir, get by command: \u0026lt;ndk_root\u0026gt;/toolchains/llvm/prebuilt/linux-x86_64/bin/clang --print-resource-dir RESOURCE_DIR=\u0026#34;${TEST_DIR}/../android-ndk-r27b/toolchains/llvm/prebuilt/linux-x86_64/lib/clang/18/\u0026#34; ## ndk sysroot, typically \u0026lt;ndk_root\u0026gt;/toolchains/llvm/prebuilt/linux-x86_64/sysroot/ SYSROOT=\u0026#34;${TEST_DIR}/../android-ndk-r27b/toolchains/llvm/prebuilt/linux-x86_64/sysroot/\u0026#34; ## Android target triple TARGET=aarch64-linux-android21 if command -v clang; then CLANG=clang elif command -v zig; then CLANG=\u0026#34;zig cc\u0026#34; else print \u0026#34;Cannot find clang or zig\\n\u0026#34; \u0026gt;\u0026amp;2 exit 1 fi ## These options are needed for llvmbox # -isystem \u0026#34;${SYSROOT}/usr/include/c++/v1\u0026#34; \\ # -isystem \u0026#34;${SYSROOT}/usr/include\u0026#34; \\ # -isystem \u0026#34;${SYSROOT}/usr/include/aarch64-linux-android\u0026#34; mkdir -p \u0026#34;${TEST_DIR}/output\u0026#34; echo \u0026#34;Test C compiler...\u0026#34; ${CLANG} \\ -B \u0026#34;${TEST_DIR}/bin\u0026#34; \\ -resource-dir \u0026#34;${RESOURCE_DIR}\u0026#34; \\ --sysroot=\u0026#34;${SYSROOT}\u0026#34; \\ --target=\u0026#34;${TARGET}\u0026#34; \\ -xc - \\ \u0026#34;$@\u0026#34; \\ -o \u0026#34;${TEST_DIR}/output/hello-c\u0026#34; \\ \u0026lt;\u0026lt;-EOF #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;%s\\n\u0026#34;, \u0026#34;Hello, C!\u0026#34;); return 0; } EOF echo \u0026#34;Test C++ compiler...\u0026#34; ${CLANG} \\ -B \u0026#34;${TEST_DIR}/bin\u0026#34; \\ -resource-dir \u0026#34;${RESOURCE_DIR}\u0026#34; \\ --sysroot=\u0026#34;${SYSROOT}\u0026#34; \\ --target=\u0026#34;${TARGET}\u0026#34; \\ -xc++ -lc++ - \\ \u0026#34;$@\u0026#34; \\ -o \u0026#34;${TEST_DIR}/output/hello-cpp\u0026#34; \\ \u0026lt;\u0026lt;-EOF #include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; \u0026#34;Hello, C++!\\n\u0026#34;; return 0; } EOF if command -v file \u0026gt;/dev/null; then file \u0026#34;${TEST_DIR}/output/hello-c\u0026#34; \u0026#34;${TEST_DIR}/output/hello-cpp\u0026#34; fi 小贴示\n项目引用Android SDK\n测试 在test目录下执行sh test.sh，会打印出以下日志\n1 2 3 4 5 6 /bin/clang Test C compiler... Test C++ compiler... /root/test//output/hello-c: ELF 64-bit LSB pie executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /system/bin/linker64, BuildID[xxHash]=10df539d438a8009, not stripped /root/test//output/hello-cpp: ELF 64-bit LSB pie executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /system/bin/linker64, BuildID[xxHash]=8ce9c24e480bcc9d, not stripped 附录 参考文献 NDK下载链接\nAndroid SDK\n版权信息 本文原载于 nightrainmilkyway.cn，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2024-08-10T21:23:21+08:00","image":"https://img.nightrainmilkyway.cn/img/1723296375281.webp","permalink":"http://localhost:1313/p/zerotermux%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B03-arch-linux%E4%B8%8A%E8%B7%91ndk/","title":"Zerotermux折腾日记(3)-Arch linux上跑NDK"},{"content":"使用须知 1.安装软件或者模块之前请务必删除 asoulopt 2.使用软件和模块时请勿开启系统的性能模式开关，如果有 Extreme gt 请务必开启 3.使用模块的就没有必要安装软件 4.模块是由 scene 控制，scene 需要关闭核心分配 5.请务必安装 CuJankDetector 模块 下载 小贴示\nGitHub release\n使用方法 1 -app 导入 使用方法 2 -模块刷入 检查日志 如果为APP导入使用，即可在 APP 内查看日志 如果为模块，则 CuprumTurbo Scheduler 日志输出路径为/storage/emulated/0/Android/ct/scheduler.log 出现Daemon Running即为调度正常运行\n附录 参考文献 版权信息 本文原载于 nightrainmilkyway.cn，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2024-08-10T21:18:22+08:00","image":"https://img.nightrainmilkyway.cn/img/1723295109779.webp","permalink":"http://localhost:1313/p/cuprumturbo-scheduler-%E4%BD%BF%E7%94%A8/","title":"CuprumTurbo Scheduler 使用"},{"content":"安装git 1 pacman -S git 配置git 1 2 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;youremail@example.com\u0026#34; 测试git 1 git --version 克隆仓库 1 git clone https://github.com/yourusername/yourrepository.git 提交代码 1 2 3 git add . git commit -m \u0026#34;your commit message\u0026#34; git push origin master 拉取代码 1 git pull origin master 使用ssh连接github 生成ssh密钥 1 ssh-keygen -t rsa -C \u0026#34;youremail@example.com\u0026#34; 添加ssh密钥到ssh-agent 1 2 eval \u0026#34;$(ssh-agent -s)\u0026#34; ssh-add ~/.ssh/id_rsa 添加ssh密钥到github 1 cat ~/.ssh/id_rsa.pub 测试ssh连接 1 ssh -T git@github.com 克隆仓库 1 git clone git@github.com:yourusername/yourrepository.git git常用命令及注释 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 git init # 初始化仓库 git add . # 添加所有文件到暂存区 git commit -m \u0026#34;commit message\u0026#34; # 提交暂存区文件到仓库区 git push origin master # 将本地分支推送到远程仓库 git pull origin master # 从远程仓库拉取最新代码 git status # 查看仓库状态 git log # 查看提交历史 git diff # 查看暂存区与工作区差异 git reset --hard HEAD # 回滚到最新提交 git checkout -- file # 撤销工作区修改 git branch # 查看分支 git branch \u0026lt;branch-name\u0026gt; # 创建分支 git checkout \u0026lt;branch-name\u0026gt; # 切换分支 git merge \u0026lt;branch-name\u0026gt; # 合并分支 git remote -v # 查看远程仓库信息 git remote add origin \u0026lt;repository-url\u0026gt; # 添加远程仓库 git remote remove origin # 删除远程仓库 git remote set-url origin \u0026lt;repository-url\u0026gt; # 修改远程仓库地址 git remote update origin --prune # 更新远程仓库信息 git remote show origin # 查看远程仓库详细信息 附录 参考文献 版权信息 本文原载于 nightrainmilkyway.cn，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2024-08-10T20:58:28+08:00","image":"https://img.nightrainmilkyway.cn/img/1723295107649.webp","permalink":"http://localhost:1313/p/zerotermux%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B02-arch-linux%E5%AE%89%E8%A3%85git/","title":"Zerotermux折腾日记(2)-Arch linux安装git"},{"content":"开始 termux作为一个能在Android上运行的终端模拟器，能够模拟Linux环境，重点是不需要root也可以使用，只不过局限性不是很大\n换源\u0026amp;安装tome脚本 换清华源 国内网络环境确实很差，官方源可能连不上，这里换源加速\n1 sed -i \u0026#39;s@^\\(deb.*stable main\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@\u0026#39; $PREFIX/etc/apt/sources.list \u0026amp;\u0026amp; apt update \u0026amp;\u0026amp; apt upgrade 安装tome一键脚本 1 2 3 awk -f \u0026lt;(curl -L l.tmoe.me/2.awk) # 备用地址 awk -f \u0026lt;(curl -L gitee.com/mo2/linux/raw/2/2.awk) 在出现 您要继续吗? Do you want to continue? 之类的选项时：[Y/n]直接按回车，[y/N]输入y再回车 前面直接回车即可，直到出现选项输入 y时，输入小写的 y即可，然后等待到出现图形化界面\nDNS 推荐选择：240c::6666\n一言：推荐选择，增加观赏性\n时区(Timezone)：Asia/Shanghai 回车\n共享目录：用于在容器中访问宿主文件，默认即可\n选择一个Linux发行版安装 如果有root权限建议安装chroot，没有root权限选择proot 推荐使用 Ubuntu , arch\n选择arm64发行版列表\n默默等待安装，中途会出现是否安装 zsh建议安装，tool如果有桌面需求可以安装，建议 xfce\nPacman 包管理 在 archlinux 上安装的软件都通过 Pacman 来进行管理。\n为了使用 Pacman 额外的命令需要先安装 pacman-contribextra / aur。\n安装 pacman-contrib ：\n1 sudo pacman -S pacman-contrib 可以把 Pacman 理解为一个软件管理器（软件管家？），可以进行软件的安装、删除、查询等：\n1 2 3 4 5 6 7 8 9 10 11 sudo pacman -S package_name # 安装软件包 pacman -Ss # 在同步数据库中搜索包，包括包的名称和描述 sudo pacman -Syu # 升级系统。 -y:标记刷新、-yy：标记强制刷新、-u：标记升级动作（一般使用 -Syu 即可） sudo pacman -Rns package_name # 删除软件包，及其所有没有被其他已安装软件包使用的依赖包 sudo pacman -R package_name # 删除软件包，保留其全部已经安装的依赖关系 pacman -Qi package_name # 检查已安装包的相关信息。-Q：查询本地软件包数据库 pacman -Qdt # 找出孤立包。-d：标记依赖包、-t：标记不需要的包、-dt：合并标记孤立包 sudo pacman -Rns $(pacman -Qtdq) # 删除孤立包 sudo pacman -Fy # 更新命令查询文件列表数据库 pacman -F some_command # 当不知道某个命令属于哪个包时，用来在远程软件包中查询某个命令属于哪个包（即使没有安装） pactree package_name # linux终端基本命令 1 2 3 4 5 6 7 8 9 10 ls /some_path # 查看某个文件夹下的文件与子文件夹。/ 代表根目录，是 Linux 最顶端的路径，以此开头则为绝对路径 pwd # 查看当前终端所在路径 cat /home/testuser/testfile # 以输出流方式查看某个文件 cd /home/testuser # 切换目录命令。将当前终端切换到某一个路径下 cp ./a.py ./b.py # 复制命令。将当前路径下的 a.py 复制一份并命名为 b.py。./ 代表当前文件夹所在路径，以此开头则为相对路径 cp -r ./a ./b # 复制整体文件夹 rm b.py # 删除命令。删除 b.py mv a.py b.py # 移动（重命名）命令。将 a.py 更名为 b.py mkdir my_folder # 新建名为 my_folder 的文件夹 sudo some_command # 使普通用户以 root 权限执行某些命令 终端美化 安装 lolcat：\n1 sudo pacman -S lolcat 通过管道符（|）将其它命令（如 neofetch）的输出传递给 lolcat：\n1 neofetch | lolcat 附录 参考文献 版权信息 本文原载于 nightrainmilkyway.cn，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2024-08-10T00:42:16+08:00","image":"https://img.nightrainmilkyway.cn/img/1723221912885.webp","permalink":"http://localhost:1313/p/zerotermux%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B01-%E5%AE%89%E8%A3%85arch-linux/","title":"Zerotermux折腾日记(1)-安装arch Linux"}]